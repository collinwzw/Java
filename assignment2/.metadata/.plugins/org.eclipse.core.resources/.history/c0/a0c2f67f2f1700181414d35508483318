package assignment2;

public class Warehouse{

	protected Shelf[] storage;
	protected int nbShelves;
	public Box toShip;
	public UrgentBox toShipUrgently;
	static String problem = "problem encountered while performing the operation";
	static String noProblem = "operation was successfully carried out";
	
	public Warehouse(int n, int[] heights, int[] lengths){
		this.nbShelves = n;
		this.storage = new Shelf[n];
		for (int i = 0; i < n; i++){
			this.storage[i]= new Shelf(heights[i], lengths[i]);
		}
		this.toShip = null;
		this.toShipUrgently = null;
	}
	
	public String printShipping(){
		Box b = toShip;
		String result = "not urgent : ";
		while(b != null){
			result += b.id + ", ";
			b = b.next;
		}
		result += "\n" + "should be already gone : ";
		b = toShipUrgently;
		while(b != null){
			result += b.id + ", ";
			b = b.next;
		}
		result += "\n";
		return result;
	}
	
 	public String print(){
 		String result = "";
		for (int i = 0; i < nbShelves; i++){
			result += i + "-th shelf " + storage[i].print();
		}
		return result;
	}
	
 	public void clear(){
 		toShip = null;
 		toShipUrgently = null;
 		for (int i = 0; i < nbShelves ; i++){
 			storage[i].clear();
 		}
 	}
 	
 	/**
 	 * initiate the merge sort algorithm
 	 */
	public void sort(){
		mergeSort(0, nbShelves -1);
	}
	
	/**
	 * performs the induction step of the merge sort algorithm
	 * @param start
	 * @param end
	 */
	protected void mergeSort(int start, int end){
		//ADD YOUR CODE HERE
		int middle;
		if (start<end) {
			middle = (start + end)/2;
			mergeSort(start,middle);
			mergeSort(middle+1, end);
			merge(start,middle,end);
		}
	}
	
	/**
	 * performs the merge part of the merge sort algorithm
	 * @param start
	 * @param mid
	 * @param end
	 */
	protected void merge(int start, int mid, int end){
		//ADD YOUR CODE HERE
		int n1=mid - start+1;
		int n2=end - mid;
		Shelf[] L= new Shelf[n1+1];
		Shelf[] R=new Shelf[n2+1];
		
		for (int i=0;i<n1;i++) {
			L[i]=storage[start+i];
		}
		for(int j =0;j<n2; j++) {
			R[j]=storage[mid+j+1];
		}
		int j=0;
		int i=0;
		L[n1]=new Shelf (1000,15);
		R[n2]=new Shelf (1000,15);
		
		for (int k=start; k <=end; k++) {
			if (L[i].height <= R[j].height) {
				storage[k]=L[i];
				i=i+1;
			}
			else {
				storage[k]=R[j];
				j=j+1;
			}
		}
	}
	
	/**
	 * Adds a box is the smallest possible shelf where there is room available.
	 * Here we assume that there is at least one shelf (i.e. nbShelves >0)
	 * @param b
	 * @return problem or noProblem
	 */
	public String addBox (Box b){
		//ADD YOUR CODE HERE
		int i=0;
		while(i < nbShelves) {
			if (b.length<=storage[i].availableLength && b.height<=storage[i].height) {
				storage[i].addBox(b);
				return "noProblem";
			}
			else {
				i=i+1;
			}
		}
		
		return"Problem";
	}
	
	/**
	 * Adds a box to its corresponding shipping list and updates all the fields
	 * @param b
	 * @return problem or noProblem
	 */
	public String addToShip (Box b){
		//ADD YOUR CODE HERE
		
		
		if (b instanceof Box ==true && b instanceof UrgentBox == true ) {
			System.out.println("the box "+b.id+"is UrgentBox");
			if (toShipUrgently==null) {
			this.toShipUrgently= (UrgentBox) b;
			}
			else {
				toShipUrgently.previous = (UrgentBox) b;
				b.next = toShipUrgently;
				toShipUrgently=(UrgentBox) b;
			}
			
		}
		else {
			if (toShip==null) {
				this.toShip=  b;
				}
				else {
					toShip.previous = b;
					b.next = toShip;
					toShip= b;
				}
			
		}
		
		return noProblem;
	}
	
	/**
	 * Find a box with the identifier (if it exists)
	 * Remove the box from its corresponding shelf
	 * Add it to its corresponding shipping list
	 * @param identifier
	 * @return problem or noProblem
	 */
	public String shipBox (String identifier){
		//ADD YOUR CODE HERE
		Box c = null;
		int i=0;
		
		outerloop:
		while(i<nbShelves) {
			c = storage[i].firstBox;
			if(storage[i].firstBox==null) {
				//shelves are empty and no need to check.
			}
			else {
				while(c!=null) {
				
					if (c.id.equals(identifier)) {
						break outerloop;
					}
					else {
						c=c.next;
						
					}
				}
			}
			if (i==nbShelves-1 && c == storage[nbShelves-1].lastBox) {
				//System.out.println("the box id with"+identifier+"is not found in warehouse");
			return problem;
			}
			i++;
		}
		
		this.storage[i].removeBox(c.id);
		System.out.println("the Box c is removed"+c.id);
		addToShip(c);
		return noProblem;
	}
	
	/**
	 * if there is a better shelf for the box, moves the box to the optimal shelf.
	 * If there are none, do not do anything
	 * @param b
	 * @param position
	 */
	public void moveOneBox (Box b, int position){
		//ADD YOUR CODE HERE
	}
	
	/**
	 * reorganize the entire warehouse : start with smaller shelves and first box on each shelf.
	 */
	public void reorganize (){
		//ADD YOUR CODE HERE
	}
}